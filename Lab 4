package node;


public class Node {
    private String value;
    private Node next;
    Node (String value) { this.value = value; }
    public Node getNextNode() { return this.next; }
    public void setNextNode (Node node) { this.next = node; }
    
    private Node append(Node node){
        Node lastNode = getNodeAtPosition(getListSize()-1);
        lastNode.setNextNode(node);
        return this;
    }
    private int getListSize(){
        int listSize =1;
        Node walker = this;
        while (walker.getNextNode() ) != null){
            walker = walker.getNextNode();
            listSize++;
    }
        return listSize;
    }
    
    
    public Node insertNodeAtPosition (Node newNode, int position){

        if (position == 0) { return newRoot(newNode);}
        if (position == getListSize()) { return append(newNode); }

        Node previousNode = getNodeAtPosition(position-1);
        newNode.setNextNode (previousNode.getNextNode());
        previousNode.setNextNode(newNode);
        return this;
    }  
    private Node getNodeAtPosition(int position){
        Node walker = this;
        for (int i=0; i<position; i++){
           walker = walker.getNextNode();
        }
        return walker;
    }
public class Main {
    public void main(String[] args) 
    {
    Node root = new Node ("A");
    root.setNextNode(new Node ("B"));
    root.getNextNode().setNextNode(new Node("C"));
    
    root = root.insertNodeAtPosition(new Node("N"), 2);
    root = root.insertNodeAtPosition(new Node("I"), 0);
    root = root.insertNodeAtPosition(new Node("L"), 5);
    
    root.print();
    }
}
    

